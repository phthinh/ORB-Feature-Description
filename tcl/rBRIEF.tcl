#*****************************************************************************************
# Vivado (TM) v2018.3 (64-bit)
#
# rBRIEF.tcl: Tcl script for re-creating project 'rBRIEF'
#
# Generated by Vivado on Sun Dec 30 08:09:42 +0000 2018
# IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (rBRIEF.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "./rtl/Angle.v"
#    "./rtl/Angle_LUT_Cos_Sin.v"
#    "./rtl/Atan2.v"
#    "./rtl/Atan2_Decoder.v"
#    "./rtl/Atan2_Multiplier.v"
#    "./rtl/Atan2_Select.v"
#    "./rtl/Centroid.v"
#    "./rtl/Centroid_Adder1.v"
#    "./rtl/Centroid_Adder2.v"
#    "./rtl/Centroid_Controller.v"
#    "./rtl/Centroid_Multiplier.v"
#    "./rtl/Delay_Corner_Signal.v"
#    "./rtl/Delay_D.v"
#    "./rtl/Delay_reg.v"
#    "./rtl/Generator.v"
#    "./rtl/Generator_Controller.v"
#    "./rtl/MultX_connect.v"
#    "./rtl/MultY_connect.v"
#    "./rtl/PointDescriptor.v"
#    "./rtl/RBRIEF.v"
#    "./rtl/Rotation.v"
#    "./rtl/Rotation_AddSubVec.v"
#    "./rtl/Rotation_Add_Substract.v"
#    "./rtl/Rotation_Multiplier.v"
#    "./rtl/Rotation_VecSplit_Mux.v"
#    "./rtl/RowBuffer.v"
#    "./rtl/ShiftRegister.v"
#    "./rtl/Valid_Shift_Register.v"
#    "./rtl/Top.v"
#    "./rtl/rBRIEF.sdc"
#    "./tb/Top_tb.v"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "../"

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "rBRIEF"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "rBRIEF.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/rBRIEF"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z020clg484-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "em.avnet.com:zed:part0:1.4" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "zed" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/rtl/Angle.v"] \
 [file normalize "${origin_dir}/rtl/Angle_LUT_Cos_Sin.v"] \
 [file normalize "${origin_dir}/rtl/Atan2.v"] \
 [file normalize "${origin_dir}/rtl/Atan2_Decoder.v"] \
 [file normalize "${origin_dir}/rtl/Atan2_Multiplier.v"] \
 [file normalize "${origin_dir}/rtl/Atan2_Select.v"] \
 [file normalize "${origin_dir}/rtl/Centroid.v"] \
 [file normalize "${origin_dir}/rtl/Centroid_Adder1.v"] \
 [file normalize "${origin_dir}/rtl/Centroid_Adder2.v"] \
 [file normalize "${origin_dir}/rtl/Centroid_Controller.v"] \
 [file normalize "${origin_dir}/rtl/Centroid_Multiplier.v"] \
 [file normalize "${origin_dir}/rtl/Delay_Corner_Signal.v"] \
 [file normalize "${origin_dir}/rtl/Delay_D.v"] \
 [file normalize "${origin_dir}/rtl/Delay_reg.v"] \
 [file normalize "${origin_dir}/rtl/Generator.v"] \
 [file normalize "${origin_dir}/rtl/Generator_Controller.v"] \
 [file normalize "${origin_dir}/rtl/MultX_connect.v"] \
 [file normalize "${origin_dir}/rtl/MultY_connect.v"] \
 [file normalize "${origin_dir}/rtl/PointDescriptor.v"] \
 [file normalize "${origin_dir}/rtl/RBRIEF.v"] \
 [file normalize "${origin_dir}/rtl/Rotation.v"] \
 [file normalize "${origin_dir}/rtl/Rotation_AddSubVec.v"] \
 [file normalize "${origin_dir}/rtl/Rotation_Add_Substract.v"] \
 [file normalize "${origin_dir}/rtl/Rotation_Multiplier.v"] \
 [file normalize "${origin_dir}/rtl/Rotation_VecSplit_Mux.v"] \
 [file normalize "${origin_dir}/rtl/RowBuffer.v"] \
 [file normalize "${origin_dir}/rtl/ShiftRegister.v"] \
 [file normalize "${origin_dir}/rtl/Valid_Shift_Register.v"] \
 [file normalize "${origin_dir}/rtl/Top.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "Top" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/rtl/rBRIEF.sdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/rtl/rBRIEF.sdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/tb/Top_tb.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "Top_tb" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z020clg484-1 -flow {Vivado Synthesis 2018} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2018" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "synth_1_synth_report_utilization_0" -objects $obj

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]










